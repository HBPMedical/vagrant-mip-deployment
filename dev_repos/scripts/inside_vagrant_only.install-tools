#!/usr/bin/env bash

DOCKER_DOWNLOAD_HOST="download.docker.com"
REQUIRED_OS_DISTRIBUTOR_ID="Ubuntu"
REQUIRED_OS_RELEASE="20.04"
REQUIRED_DOCKER_VERSION="20.10.0"

PREREQUIRED_PACKAGES="git apt-transport-https ca-certificates ssl-cert curl gnupg-agent software-properties-common net-tools whois lsof expect python3-pip"
REQUIRED_PACKAGES="docker-ce docker-ce-cli docker-ce-rootless-extras containerd.io"
REQUIRED_PIP3_PACKAGES="chardet"
REQUIRED_CUSTOM_PACKAGES="docker-compose"


export DEBIAN_FRONTEND=noninteractive


check_os(){
	local result=0
	if [[ "$(lsb_release -si)" != "$REQUIRED_OS_DISTRIBUTOR_ID" || "$(lsb_release -sr)" != "$REQUIRED_OS_RELEASE" ]]; then
		echo "Required OS version: $REQUIRED_OS_DISTRIBUTOR_ID $REQUIRED_OS_RELEASE!"
		result=1
	else
		DISTRIB_ID=$(lsb_release -si|awk '{print tolower($0)}')
		DISTRIB_RELEASE=$(lsb_release -sr)
		DISTRIB_CODENAME=$(lsb_release -sc|awk '{print tolower($0)}')
	fi

	return $result
}

prepare_docker_apt_sources(){
	local next=0
	while [[ $next -eq 0 ]]; do
		next=1
		if [[ "$(apt-key fingerprint 0EBFCD88 2>/dev/null)" = "" ]]; then
			curl -fsSL https://$DOCKER_DOWNLOAD_HOST/linux/$DISTRIB_ID/gpg | apt-key add -
			next=0
		fi
		if [[ "$(grep -R $DOCKER_DOWNLOAD_HOST /etc/apt)" = "" ]]; then
			add-apt-repository "deb [arch=amd64] https://$DOCKER_DOWNLOAD_HOST/linux/$DISTRIB_ID $DISTRIB_CODENAME stable"
			apt-get update
			next=0
		fi
	done
}

install_required_packages(){
	local required_packages=""
	case $1 in
		prerequired)
			required_packages=$PREREQUIRED_PACKAGES
			;;
		required)
			required_packages=$REQUIRED_PACKAGES
			;;
		pip3)
			required_packages=$REQUIRED_PIP3_PACKAGES
			;;
		*)
			return 1
			;;
	esac

	local next=0
	while [[ $next -eq 0 ]]; do
		local packages=""
		next=1
		for package in $required_packages; do
			local match=""
			if [[ "$1" = "pip3" ]]; then
				match=$(pip3 list --format=columns|grep "^$package "|awk '{print $1}')
			else
				match=$(dpkg --list|grep "^ii\s*$package ")
			fi
			if [[ "$match" = "" ]]; then
				packages="$packages $package"
				next=0
			fi
		done
		local install_option="-y"
		if [[ $next -eq 0 ]]; then
			if [[ "$1" = "pip3" ]]; then
				pip3 install $packages
			else
				apt-get update && apt-get install $install_option $packages
			fi
		fi
	done
}

install_required_custom_packages(){
	local result=0
	local packages=""
	for package in $REQUIRED_CUSTOM_PACKAGES; do
		if [[ ! $(command -v $package) ]]; then
			packages="$packages $package"
		fi
	done

	if [[ "$packages" != "" ]]; then
		echo "custom packages to be installed=<$packages>"
	fi

	for package in $packages; do
		install_custom_package_$package
	done

	return $result
}

install_custom_package_pyenv(){
	if [[ ! $(command -v pyenv) ]]; then
		if [[ ! -d /usr/src/pyenv ]]; then
			git clone https://github.com/pyenv/pyenv /usr/src/pyenv
		fi
		ln -s /usr/src/pyenv/bin/pyenv /usr/bin/
		if [[ "$(awk '/PYENV_ROOT=/' /root/.bashrc)" = "" ]]; then
			echo 'PYENV_ROOT="/usr/src/pyenv"' >> /root/.bashrc
		fi
		if [[ "$(env|grep PYENV_ROOT)" = "" ]]; then
			export PYENV_ROOT="/usr/src/pyenv"
		fi
	fi
}

install_custom_package_python2(){
	if [[ "$(pyenv versions|grep 2.7.)" = "" ]]; then
		local aptoption=""
		if [[ $ARG_YES -eq 1 ]]; then
			aptoption="-y"
		fi
		apt-get install $aptoption build-essential zlib1g-dev libreadline-dev libbz2-dev libsqlite3-dev libssl-dev
		echo "Installing Python 2.7. This may take a while..."
		pyenv install 2.7.17
	fi
	ln -s $PYENV_ROOT/versions/2.7.17/bin/pip2.7 /usr/bin/
	ln -s pip2.7 /usr/bin/pip2
	ln -s pip2 /usr/bin/pip

	ln -s $PYENV_ROOT/versions/2.7.17/bin/python2.7 /usr/bin/
	ln -s python2.7 /usr/bin/python2
	ln -s python2 /usr/bin/python

	ln -s $PYENV_ROOT/versions/2.7.17/bin/python2.7-config /usr/bin/
	ln -s python2.7-config /usr/bin/python2-config
	ln -s python2-config /usr/bin/python-config
}

install_custom_package_docker-compose(){
	local version=`curl --silent "https://api.github.com/repos/docker/compose/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'`
	curl --silent -L "https://github.com/docker/compose/releases/download/$version/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose
}


ret=1

check_os
ret=$?
if [[ $ret -eq 0 ]]; then
	install_required_packages prerequired
	ret=$?
fi

if [[ $ret -eq 0 ]]; then
	prepare_docker_apt_sources
	ret=$?
fi

if [[ $ret -eq 0 ]]; then
	install_required_packages required
	ret=$?
fi

if [[ $ret -eq 0 ]]; then
	install_required_packages pip3
	ret=$?
fi

if [[ $ret -eq 0 ]]; then
	install_required_custom_packages
	ret=$?
fi

exit $ret
